// <auto-generated />
using System;
using JobHunt.Infrastructure.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobHunt.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<byte[]>("CompanyIconImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CompanyIconUrl")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("CompanyWebSite")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.Job", b =>
                {
                    b.Property<Guid>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CompatiblePercentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobDetailUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("JobFilterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkingLocation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobFilterId");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.JobFilter", b =>
                {
                    b.Property<Guid>("JobFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AverageCompatibility")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilterTitle")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsStarred")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobFilterOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("LevelJobLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccupationJobFieldId")
                        .HasColumnType("int");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("JobFilterId");

                    b.HasIndex("JobFilterOwnerId");

                    b.HasIndex("LevelJobLevelId");

                    b.HasIndex("OccupationJobFieldId");

                    b.ToTable("JobFilters", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.JobHunter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutMe")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MajorId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpirationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("University")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WorkingEmail")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("MajorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DemoLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ProjectOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectOwnerId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AchievementName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("JobHunterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobHunterId");

                    b.ToTable("Achievement", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.Property<string>("VietNameseName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("EducationId");

                    b.ToTable("Educations", (string)null);

                    b.HasData(
                        new
                        {
                            EducationId = 0,
                            VietNameseName = "Không Có Bằng Cấp"
                        },
                        new
                        {
                            EducationId = 2,
                            VietNameseName = "Tốt Nghiệp Cao Đẳng"
                        },
                        new
                        {
                            EducationId = 1,
                            VietNameseName = "Tốt Nghiệp Trung Học"
                        },
                        new
                        {
                            EducationId = 3,
                            VietNameseName = "Tốt Nghiệp Cử Nhân/Kỹ Sư/Bác Sĩ"
                        },
                        new
                        {
                            EducationId = 4,
                            VietNameseName = "Tốt Nghiệp Thạc Sĩ"
                        },
                        new
                        {
                            EducationId = 5,
                            VietNameseName = "Tốt Nghiệp Tiến Sĩ"
                        });
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.JobField", b =>
                {
                    b.Property<int>("JobFieldId")
                        .HasColumnType("int");

                    b.Property<string>("VietNameseName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("JobFieldId");

                    b.ToTable("JobFields", (string)null);

                    b.HasData(
                        new
                        {
                            JobFieldId = 0,
                            VietNameseName = "Công Nghệ Thông Tin"
                        },
                        new
                        {
                            JobFieldId = 1,
                            VietNameseName = "Phát Triển Phần Mềm"
                        },
                        new
                        {
                            JobFieldId = 48,
                            VietNameseName = "Giáo Dục Ngôn Ngữ"
                        });
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.JobLevel", b =>
                {
                    b.Property<int>("JobLevelId")
                        .HasColumnType("int");

                    b.Property<string>("VietNameseName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("JobLevelId");

                    b.ToTable("JobLevels", (string)null);

                    b.HasData(
                        new
                        {
                            JobLevelId = 0,
                            VietNameseName = "Thực Tập Sinh"
                        },
                        new
                        {
                            JobLevelId = 1,
                            VietNameseName = "Nhân Viên Mới"
                        },
                        new
                        {
                            JobLevelId = 2,
                            VietNameseName = "Nhân Viên"
                        },
                        new
                        {
                            JobLevelId = 3,
                            VietNameseName = "Chuyên Viên"
                        },
                        new
                        {
                            JobLevelId = 4,
                            VietNameseName = "Trưởng Nhóm"
                        },
                        new
                        {
                            JobLevelId = 5,
                            VietNameseName = "Quản Lý"
                        },
                        new
                        {
                            JobLevelId = 6,
                            VietNameseName = "Giám Đốc"
                        });
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommunicationLanguage")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("JobFilterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobFilterId");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.Major", b =>
                {
                    b.Property<int>("MajorId")
                        .HasColumnType("int");

                    b.Property<string>("VietNameseName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("MajorId");

                    b.ToTable("Majors", (string)null);

                    b.HasData(
                        new
                        {
                            MajorId = 0,
                            VietNameseName = "Không Có Chuyên Ngành"
                        },
                        new
                        {
                            MajorId = 1,
                            VietNameseName = "Khoa Học Máy Tính"
                        },
                        new
                        {
                            MajorId = 3,
                            VietNameseName = "Phát Triển Phần Mềm"
                        },
                        new
                        {
                            MajorId = 7,
                            VietNameseName = "Kỹ Thuật Máy Tính"
                        },
                        new
                        {
                            MajorId = 22,
                            VietNameseName = "Kế Toán"
                        });
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.MatchingRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Requirement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("MatchingRequirement", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.ProjectFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Feature")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFeature", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectOwnerRole")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.SoftSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobFilterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SoftSkillName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("JobFilterId");

                    b.ToTable("SoftSkill", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.SpecializedKnowledge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobFilterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Knowledge")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("JobFilterId");

                    b.ToTable("SpecializedKnowledge", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.TechnologyOrSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TechOrSkill")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TechnologyOrSkill", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.Tool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobFilterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToolName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("JobFilterId");

                    b.ToTable("Tool", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.Job", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.Company", "Company")
                        .WithMany("PostedJobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobHunt.Core.Domain.Entities.JobFilter", "JobFilter")
                        .WithMany("MatchJobList")
                        .HasForeignKey("JobFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("JobFilter");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.JobFilter", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.JobHunter", "JobFilterOwner")
                        .WithMany("JobFilters")
                        .HasForeignKey("JobFilterOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobHunt.Core.Domain.ValueObjects.JobLevel", "Level")
                        .WithMany("JobFilters")
                        .HasForeignKey("LevelJobLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobHunt.Core.Domain.ValueObjects.JobField", "Occupation")
                        .WithMany("JobFilters")
                        .HasForeignKey("OccupationJobFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobFilterOwner");

                    b.Navigation("Level");

                    b.Navigation("Occupation");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.JobHunter", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.ValueObjects.Education", "Education")
                        .WithMany("JobHunters")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobHunt.Core.Domain.ValueObjects.Major", "Major")
                        .WithMany("JobHunters")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.Project", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.JobHunter", "ProjectOwner")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectOwner");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.Achievement", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.JobHunter", "JobHunter")
                        .WithMany("Awards")
                        .HasForeignKey("JobHunterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobHunter");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.Language", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.JobFilter", "JobFilter")
                        .WithMany("Languages")
                        .HasForeignKey("JobFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobFilter");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.MatchingRequirement", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.Job", "Job")
                        .WithMany("MatchingRequirements")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.ProjectFeature", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.Project", "Project")
                        .WithMany("Features")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.Role", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.Project", "Project")
                        .WithMany("Roles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.SoftSkill", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.JobFilter", "JobFilter")
                        .WithMany("SoftSkills")
                        .HasForeignKey("JobFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobFilter");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.SpecializedKnowledge", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.JobFilter", "JobFilter")
                        .WithMany("SpecializedKnowledges")
                        .HasForeignKey("JobFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobFilter");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.TechnologyOrSkill", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.Project", "Project")
                        .WithMany("TechnologiesOrSkills")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.Tool", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.JobFilter", "JobFilter")
                        .WithMany("Tools")
                        .HasForeignKey("JobFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobFilter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.JobHunter", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.JobHunter", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobHunt.Core.Domain.Entities.JobHunter", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("JobHunt.Core.Domain.Entities.JobHunter", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.Company", b =>
                {
                    b.Navigation("PostedJobs");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.Job", b =>
                {
                    b.Navigation("MatchingRequirements");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.JobFilter", b =>
                {
                    b.Navigation("Languages");

                    b.Navigation("MatchJobList");

                    b.Navigation("SoftSkills");

                    b.Navigation("SpecializedKnowledges");

                    b.Navigation("Tools");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.JobHunter", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("JobFilters");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.Entities.Project", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Roles");

                    b.Navigation("TechnologiesOrSkills");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.Education", b =>
                {
                    b.Navigation("JobHunters");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.JobField", b =>
                {
                    b.Navigation("JobFilters");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.JobLevel", b =>
                {
                    b.Navigation("JobFilters");
                });

            modelBuilder.Entity("JobHunt.Core.Domain.ValueObjects.Major", b =>
                {
                    b.Navigation("JobHunters");
                });
#pragma warning restore 612, 618
        }
    }
}
